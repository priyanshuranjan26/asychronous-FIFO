module tb_async_fifo_simple();
    reg wr_clk, rd_clk, rst_n, wr_en, rd_en;
    reg [7:0] din;
    wire [7:0] dout;
    wire full, empty;

    async_fifo #(8, 4) DUT (.wr_clk(wr_clk), .rd_clk(rd_clk), .rst_n(rst_n),
                            .wr_en(wr_en), .rd_en(rd_en), .din(din), .dout(dout),
                            .full(full), .empty(empty));

    initial begin
        wr_clk = 0; rd_clk = 0;
        forever #5 wr_clk = ~wr_clk;   // 100MHz
    end
    initial forever #7 rd_clk = ~rd_clk; // Different clock domain

    initial begin
        rst_n = 0; wr_en = 0; rd_en = 0; din = 0;
        #20 rst_n = 1;

        // Write some data
        repeat(5) begin
            @(posedge wr_clk); wr_en=1; din=$random;
        end
        @(posedge wr_clk) wr_en=0;

        // Read some data
        repeat(5) begin
            @(posedge rd_clk); rd_en=1;
        end
        @(posedge rd_clk) rd_en=0;

        #100 $finish;
    end
endmodule
